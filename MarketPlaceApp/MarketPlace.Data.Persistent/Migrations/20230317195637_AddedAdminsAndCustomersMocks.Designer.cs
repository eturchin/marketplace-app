// <auto-generated />
using System;
using MarketPlace.Data.Persistent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPlace.Data.Persistent.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230317195637_AddedAdminsAndCustomersMocks")]
    partial class AddedAdminsAndCustomersMocks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "customer"
                        });
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 111L,
                            CreationDate = new DateTime(2023, 3, 17, 19, 56, 37, 806, DateTimeKind.Utc).AddTicks(2741),
                            Email = "admin@mail.ru",
                            FirstName = "admin",
                            IsActive = true,
                            LastModified = new DateTime(2023, 3, 17, 19, 56, 37, 806, DateTimeKind.Utc).AddTicks(2744),
                            LastName = "admin",
                            Login = "admin",
                            PasswordHash = new byte[] { 105, 114, 158, 37, 144, 254, 152, 44, 93, 8, 87, 226, 18, 231, 191, 140, 154, 103, 234, 106, 200, 146, 14, 228, 223, 51, 113, 50, 237, 211, 207, 237, 110, 45, 76, 50, 155, 219, 2, 23, 241, 205, 156, 243, 144, 254, 153, 237, 197, 140, 134, 200, 94, 154, 134, 121, 174, 118, 85, 88, 114, 70, 48, 195 },
                            PasswordSalt = new byte[] { 107, 89, 207, 14, 220, 42, 76, 43, 110, 116, 155, 162, 135, 249, 168, 175, 203, 193, 113, 116, 54, 142, 46, 231, 49, 58, 127, 51, 62, 50, 145, 27, 147, 196, 95, 12, 110, 154, 147, 143, 56, 185, 7, 46, 222, 243, 81, 86, 97, 124, 241, 175, 218, 109, 28, 114, 47, 74, 164, 200, 83, 212, 17, 118, 83, 30, 43, 66, 45, 125, 112, 240, 77, 252, 65, 49, 17, 222, 17, 253, 229, 181, 253, 163, 251, 98, 248, 55, 215, 148, 199, 64, 226, 170, 214, 22, 111, 149, 166, 71, 15, 10, 235, 16, 221, 239, 218, 182, 96, 107, 197, 111, 210, 63, 156, 230, 21, 124, 109, 20, 188, 115, 126, 237, 4, 149, 55, 60 },
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 222L,
                            CreationDate = new DateTime(2023, 3, 17, 19, 56, 37, 806, DateTimeKind.Utc).AddTicks(2758),
                            Email = "customer@mail.ru",
                            FirstName = "customer",
                            IsActive = true,
                            LastModified = new DateTime(2023, 3, 17, 19, 56, 37, 806, DateTimeKind.Utc).AddTicks(2759),
                            LastName = "customer",
                            Login = "customer",
                            PasswordHash = new byte[] { 45, 12, 5, 247, 224, 60, 149, 54, 106, 159, 22, 45, 106, 61, 83, 137, 17, 100, 94, 138, 234, 84, 36, 159, 7, 39, 29, 16, 5, 242, 74, 237, 191, 194, 123, 228, 37, 10, 184, 113, 237, 117, 148, 78, 59, 123, 236, 170, 253, 141, 19, 86, 74, 230, 7, 42, 176, 255, 26, 189, 37, 89, 202, 87 },
                            PasswordSalt = new byte[] { 107, 89, 207, 14, 220, 42, 76, 43, 110, 116, 155, 162, 135, 249, 168, 175, 203, 193, 113, 116, 54, 142, 46, 231, 49, 58, 127, 51, 62, 50, 145, 27, 147, 196, 95, 12, 110, 154, 147, 143, 56, 185, 7, 46, 222, 243, 81, 86, 97, 124, 241, 175, 218, 109, 28, 114, 47, 74, 164, 200, 83, 212, 17, 118, 83, 30, 43, 66, 45, 125, 112, 240, 77, 252, 65, 49, 17, 222, 17, 253, 229, 181, 253, 163, 251, 98, 248, 55, 215, 148, 199, 64, 226, 170, 214, 22, 111, 149, 166, 71, 15, 10, 235, 16, 221, 239, 218, 182, 96, 107, 197, 111, 210, 63, 156, 230, 21, 124, 109, 20, 188, 115, 126, 237, 4, 149, 55, 60 },
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.CartItem", b =>
                {
                    b.HasOne("MarketPlace.Data.Persistent.Classes.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.Data.Persistent.Classes.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.OrderItem", b =>
                {
                    b.HasOne("MarketPlace.Data.Persistent.Classes.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.Data.Persistent.Classes.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Product", b =>
                {
                    b.HasOne("MarketPlace.Data.Persistent.Classes.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Entities.User", b =>
                {
                    b.HasOne("MarketPlace.Data.Persistent.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Classes.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MarketPlace.Data.Persistent.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
